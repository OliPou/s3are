// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: uploadFile.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUploadedFile = `-- name: CreateUploadedFile :one
INSERT INTO uploaded_file (
    transaction_uuid,
    consumer,
    user_name,
    file_name,
    upload_presigned_url,
    upload_expiration_time,
    status,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, NOW()
)
RETURNING transaction_uuid, consumer, user_name, file_name, file_size, file_type, upload_presigned_url, download_presigned_url, status, created_at, updated_at, download_expiration_time, upload_expiration_time
`

type CreateUploadedFileParams struct {
	TransactionUuid      uuid.UUID
	Consumer             string
	UserName             string
	FileName             string
	UploadPresignedUrl   string
	UploadExpirationTime sql.NullTime
	Status               string
}

func (q *Queries) CreateUploadedFile(ctx context.Context, arg CreateUploadedFileParams) (UploadedFile, error) {
	row := q.db.QueryRowContext(ctx, createUploadedFile,
		arg.TransactionUuid,
		arg.Consumer,
		arg.UserName,
		arg.FileName,
		arg.UploadPresignedUrl,
		arg.UploadExpirationTime,
		arg.Status,
	)
	var i UploadedFile
	err := row.Scan(
		&i.TransactionUuid,
		&i.Consumer,
		&i.UserName,
		&i.FileName,
		&i.FileSize,
		&i.FileType,
		&i.UploadPresignedUrl,
		&i.DownloadPresignedUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DownloadExpirationTime,
		&i.UploadExpirationTime,
	)
	return i, err
}

const getUploadedFile = `-- name: GetUploadedFile :one
SELECT transaction_uuid, consumer, user_name, file_name, file_size, file_type, upload_presigned_url, download_presigned_url, status, created_at, updated_at, download_expiration_time, upload_expiration_time FROM uploaded_file
WHERE transaction_uuid = $1 and consumer = $2 and user_name = $3
LIMIT 1
`

type GetUploadedFileParams struct {
	TransactionUuid uuid.UUID
	Consumer        string
	UserName        string
}

func (q *Queries) GetUploadedFile(ctx context.Context, arg GetUploadedFileParams) (UploadedFile, error) {
	row := q.db.QueryRowContext(ctx, getUploadedFile, arg.TransactionUuid, arg.Consumer, arg.UserName)
	var i UploadedFile
	err := row.Scan(
		&i.TransactionUuid,
		&i.Consumer,
		&i.UserName,
		&i.FileName,
		&i.FileSize,
		&i.FileType,
		&i.UploadPresignedUrl,
		&i.DownloadPresignedUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DownloadExpirationTime,
		&i.UploadExpirationTime,
	)
	return i, err
}

const updateUploadedFile = `-- name: UpdateUploadedFile :one
UPDATE uploaded_file
SET
    file_size = $2,
    file_type = $3,
    download_presigned_url = $4,
    status = $5,
    updated_at = NOW(),
    download_expiration_time = $6
WHERE transaction_uuid = $1
RETURNING transaction_uuid, consumer, user_name, file_name, file_size, file_type, upload_presigned_url, download_presigned_url, status, created_at, updated_at, download_expiration_time, upload_expiration_time
`

type UpdateUploadedFileParams struct {
	TransactionUuid        uuid.UUID
	FileSize               sql.NullInt32
	FileType               sql.NullString
	DownloadPresignedUrl   sql.NullString
	Status                 string
	DownloadExpirationTime sql.NullTime
}

func (q *Queries) UpdateUploadedFile(ctx context.Context, arg UpdateUploadedFileParams) (UploadedFile, error) {
	row := q.db.QueryRowContext(ctx, updateUploadedFile,
		arg.TransactionUuid,
		arg.FileSize,
		arg.FileType,
		arg.DownloadPresignedUrl,
		arg.Status,
		arg.DownloadExpirationTime,
	)
	var i UploadedFile
	err := row.Scan(
		&i.TransactionUuid,
		&i.Consumer,
		&i.UserName,
		&i.FileName,
		&i.FileSize,
		&i.FileType,
		&i.UploadPresignedUrl,
		&i.DownloadPresignedUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DownloadExpirationTime,
		&i.UploadExpirationTime,
	)
	return i, err
}
